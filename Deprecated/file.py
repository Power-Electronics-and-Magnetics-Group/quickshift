import numpy as np 
import sympy

b, r, l, d, r1, r2, r3, r4, r5, r6, r7, I_p = sympy.symbols('b r l d r1 r2 r3 r4 r5 r6 r7 I_p')


# placeholder values; will update them with user inputs later 

b = float(input('1-D layer width:')) # layer width in the 1-D case 
r = float(input('2-D conductor thickness:')) # conductor thickness in the 2-D case
l = float(input('Turn length:')) # turn length 
d = float(0) # Skin depth 
I_p = float(input('Series-connected primary layer current: ')) # layer currents - I2 = I3 = I4 = I7


t_r1 = float(input('Distance between layers 1 and 2:'))
t_r3 = float(input('Distance between layers 3 and 4:'))

r1 = t_r1
r2 = t_r1
r3 = t_r3
r4 = t_r1
r5 = t_r3
r6 = t_r1
r7 = t_r1


A2 = np.array([
[0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],

[-1,0,0,0,0,0,0,0,b,b,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,-1,0,0,0,0,0,0,0,0,b,b,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,-1,0,0,0,0,0,0,0,0,0,b,b,0,0,0,0,0,0,0,0,0,0],
[0,0,0,-1,0,0,0,0,0,0,0,0,0,0,b,b,0,0,0,0,0,0,0,0],
[0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,b,b,0,0,0,0,0,0],
[0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,b,b,0,0,0,0],
[0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,b,b,0,0],
[0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,b,b],

[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],

[(r1+r2+r3+r4)*l/b,(r2+r3+r4)*l/b,(r3+r4)*l/b,r4*l/b,0,0,0,0,0,.5*d*d,0,0,0,0,0,0,-.5*d*d,0,0,0,0,0,0,0],
[r5*l/b,r5*l/b,r5*l/b,r5*l/b,r5*l/b,0,0,0,0,0,0,0,0,0,0,0,0,.5*d*d,-.5*d*d,0,0,0,0,0],
[(r6+r7)*l/b,(r6+r7)*l/b,(r6+r7)*l/b,(r6+r7)*l/b,(r6+r7)*l/b,(r6+r7)*l/b,r7*l/b,0,0,0,0,0,0,0,0,0,0,0,0,.5*d*d,0,0,-.5*d*d,0]])

A2 = A2.astype(np.float64)

B2 = np.array(
[[I_p],[I_p],[I_p],[I_p],
[0],[0],[0],[0],[0],[0],[0],[0],[0],
[0],[0],[0],[0],[0],[0],[0],[0],
[0],[0],[0]])

print(A2.dtype)
print(B2.dtype)

#B2 = B2.astype(float)
#print(A2)
Z = sympy.simplify(np.linalg.solve(A2,B2))
print(Z[1]+Z[3]+Z[5]+Z[7])
